// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Unit {
  PER_POST
  PER_VIDEO
  PER_HOUR
  PER_DAY
  OTHER
}

model Creator {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  phoneNumber   String?  @unique
  password      String
  username      String?
  fullName      String
  bio           String?
  avatar        String?
  emailVerified Boolean? @default(false)
  phoneVerified Boolean? @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  title           String?
  charges         Int?
  unit            Unit?
  languagesSpoken String[]
  categories      String[]
  subCategories   String[]
  city            String?
  state           String?
  country         String?

  socialIds         Json?
  availability      Boolean?
  campaignInviteIds String[]        @db.ObjectId
  campaignInvites   Campaign[]      @relation(fields: [campaignInviteIds], references: [id])
  proposalIds       String[]        @db.ObjectId
  proposals         Proposal[]
  collaborations    Collaboration[]
  collaborationIds  String[]        @db.ObjectId
  ratings           Float?          @default(0)
  stripeAccountId   String?
  Chat              Chat[]
  payments          Payment[]
}

model UserVerification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  role      String
  link      String
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Collaboration {
  id         String              @id @default(auto()) @map("_id") @db.ObjectId
  brand      Brand               @relation(fields: [brandId], references: [id])
  brandId    String              @db.ObjectId
  creator    Creator             @relation(fields: [creatorId], references: [id])
  creatorId  String              @db.ObjectId
  campaign   Campaign            @relation(fields: [campaignId], references: [id])
  campaignId String              @db.ObjectId
  status     CollaborationStatus
  rating     Int?
  paymentId  String?             @db.ObjectId
  payment    Payment?            @relation(fields: [paymentId], references: [id])
  createdAt  DateTime            @default(now())
}

model Payment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  paymentId     String
  brand         Brand           @relation(fields: [brandId], references: [id])
  brandId       String          @db.ObjectId
  creator       Creator         @relation(fields: [creatorId], references: [id])
  creatorId     String          @db.ObjectId
  amount        Int
  createdAt     DateTime        @default(now())
  collaboration Collaboration[]
}

enum CollaborationStatus {
  PENDING
  APPROVED
  DECLINED
}

model Brand {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  email           String          @unique
  password        String
  name            String?
  phoneNumber     String?
  personName      String
  personRole      String?
  description     String?
  website         String?
  logo            String?
  industry        String?
  country         String?
  state           String?
  city            String?
  emailVerified   Boolean?        @default(false)
  phoneVerified   Boolean?        @default(false)
  campaigns       Campaign[]
  campaignIds     String[]        @db.ObjectId
  collaborations  Collaboration[]
  collborationIds String[]        @db.ObjectId
  createdAt       DateTime        @default(now())
  Chat            Chat[]
  payments        Payment[]
}

model Campaign {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  brand           Brand              @relation(fields: [brandId], references: [id])
  brandId         String             @db.ObjectId
  name            String
  description     String
  startDate       DateTime?
  endDate         DateTime?
  feesFrom        String?
  feesTo          String?
  type            Unit?
  targetCategory  String[]
  collaborators   Creator[]          @relation(fields: [collaboratorIds], references: [id])
  collaboratorIds String[]           @db.ObjectId
  status          CampaignStatus
  visibility      CampaignVisibility
  proposals       Proposal[]
  proposalIds     String[]           @db.ObjectId
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  Collaboration   Collaboration[]
}

model Proposal {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  campaign     Campaign       @relation(fields: [campaignId], references: [id])
  campaignId   String         @db.ObjectId
  creator      Creator        @relation(fields: [creatorId], references: [id])
  creatorId    String         @db.ObjectId
  message      String
  proposedRate Int
  status       ProposalStatus
  createdAt    DateTime       @default(now())
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  creator   Creator  @relation(fields: [creatorId], references: [id])
  creatorId String   @db.ObjectId
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chatId    String   @db.ObjectId
  senderId  String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
}

enum ProposalStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum CampaignVisibility {
  PUBLIC
  PRIVATE
}

enum CampaignStatus {
  PLANNED
  ACTIVE
  COMPLETED
}
